---Prime attribute & Non prime attribute
-In the context of database design and normalization, a prime attribute is an attribute that is part of a candidate key of a relation. A non-prime attribute is an attribute that is not part of any candidate key.

For example, let’s say we have a relation `Student` with attributes `student_id`, `name`, `email`, and `phone`. Let’s assume that `student_id` is unique for each student and can be used to identify a student. 
In this case, `student_id` is a candidate key for the relation `Student`. Since `student_id` is part of a candidate key, it is a prime attribute. The other attributes (`name`, `email`, and `phone`) are not part of any candidate key and are therefore non-prime attributes.




---BCNF form

BCNF (Boyce-Codd Normal Form) is an advanced version of the Third Normal Form (3NF). A table is in BCNF if for every functional dependency X → Y, X is the super key of the table1.

Here’s an example to help you understand BCNF better:

Consider a relation R(A, B, C) with functional dependencies {A → BC, B → A}. In this relation, both A and B are super keys so the relation is in BCNF

Sure! Here's an example with tables to help you understand BCNF better:

Consider a college enrollment table with columns `student_id`, `subject`, and `professor`.

| student_id | subject | professor |
|------------|---------|-----------|
| 101        | Java    | P.Java    |
| 101        | C++     | P.Cpp     |
| 102        | Java    | P.Java2   |
| 103        | C#      | P.Chash   |
| 104        | Java    | P.Java    |

In this table, one student can enroll for multiple subjects. For each subject, a professor is assigned to the student. And there can be multiple professors teaching one subject like we have for Java.

`student_id` and `subject` together form the primary key because using `student_id` and `subject`, we can find all the columns of the table. One professor teaches only one subject, but one subject may have two different professors. 
Hence, there is a dependency between `subject` and `professor` here, where `subject` depends on the professor's name.

This table satisfies the 1st Normal Form because all the values are atomic, column names are unique and all the values stored in a particular column are of the same domain. 
This table also satisfies the 2nd Normal Form as there is no Partial Dependency. And there is no Transitive Dependency, hence the table also satisfies the 3rd Normal Form.

But this table is not in Boyce-Codd Normal Form (BCNF). In the table above, `student_id` and `subject` form the primary key, which means the `subject` column is a prime attribute. 
But there is one more dependency: `professor → subject`. And while `subject` is a prime attribute, `professor` is a non-prime attribute, which is not allowed by BCNF.

To make this relation (table) satisfy BCNF, we will decompose this table into two tables: a student table and a professor table.
Sure! To make the college enrollment table satisfy BCNF, we will decompose it into two tables: a student table and a professor table.

The student table will have columns `student_id` and `subject`:
| student_id | subject |
|------------|---------|
| 101        | Java    |
| 101        | C++     |
| 102        | Java    |
| 103        | C#      |
| 104        | Java    |

The professor table will have columns `subject` and `professor`:
| subject | professor |
|---------|-----------|
| Java    | P.Java    |
| C++     | P.Cpp     |
| Java    | P.Java2   |
| C#      | P.Chash   |

Now both tables are in BCNF. 


Difference b/w 3NF & BCNF (Quick Recap):
-3NF allows some exceptions (if RHS is a prime attribute).
-BCNF is strict — no exceptions — LHS must be super key.








---4NF

Fourth Normal Form (4NF) is an extension of Boyce-Codd Normal Form (BCNF). A relation is in 4NF if it satisfies the following conditions:
- It is in BCNF.
- It does not have any multi-valued dependency.

A multi-valued dependency occurs when an attribute depends on another attribute, but not on the key of the relation. 
For a multi-valued dependency to occur there must be at least 3 columns in the relation. If X → Y exists in a relation R (X, Y, Z) then Y and Z should be independent of each other.

Here's an example to help you understand 4NF better:
Consider a table `Student` that contains the following records:
| Stu_Id | Stu_Course | Stu_Hobby |
|--------|------------|-----------|
| 101    | C++        | Reading   |
| 101    | C++        | Writing   |

A student can join more than one course. Let's say student with `Stu_Id` 101 joins another course "Java". For a new course, instead of one row, two rows need to be added.
| Stu_Id | Stu_Course | Stu_Hobby |
|--------|------------|-----------|
| 101    | C++        | Reading   |
| 101    | C++        | Writing   |
| 101    | Java       | Reading   |
| 101    | Java       | Writing   |

This relation has a multi-valued dependency as `Stu_Id → Stu_Course`, meaning student course is dependent on student id and for each student id, there are multiple courses. Also, `Stu_Course` and `Stu_Hobby` are independent of each other.
This table has unnecessary records as for each new course, more than one record needs to be added to the table. Let's decompose this table into 4NF:
This table is already in BCNF. We just need to remove the multi-valued dependency. Let's decompose the original table into two tables.

Table 1: Course
| Stu_Id | Stu_Course |
|--------|------------|
| 101    | C++        |
| 101    | Java       |

Table 2: Hobby
| Stu_Id | Stu_Hobby |
|--------|-----------|
| 101    | Reading   |
| 101    | Writing   |

These tables are in 4NF as the multi-valued dependency is removed.